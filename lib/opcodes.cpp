#include "../include/common.hpp"

#include <unordered_map>

enum class Opcode : u8 {
    NOP,
    LD_BC_D16,
    LD_MR_R_BC_A,
    INC_R_BC,
    INC_R_B,
    DEC_R_B,
    LD_R_D8_B,
    RLCA,
    LD_A16_R_SP,
    ADD_R_R_HL_BC,
    LD_R_MR_A_BC,
    DEC_R_BC,
    INC_R_C,
    DEC_R_C,
    LD_R_D8_C,
    RRCA,
    STOP,
    LD_DE_D16,
    LD_MR_R_DE_A,
    INC_R_DE,
    INC_R_D,
    DEC_R_D,
    LD_R_D8_D,
    RLA,
    JR_R8,
    ADD_R_R_HL_DE,
    LD_R_MR_A_DE,
    DEC_R_DE,
    INC_R_E,
    DEC_R_E,
    LD_R_D8_E,
    RRA,
    JR_NZ_R8,
    LD_HL_D16,
    LD_MR_R_HLI_A,
    INC_R_HL,
    INC_R_H,
    DEC_R_H,
    LD_R_D8_H,
    DAA,
    JR_Z_R8,
    ADD_R_R_HL_HL,
    LD_R_MR_A_HLI,
    DEC_R_HL,
    INC_R_L,
    DEC_R_L,
    LD_R_D8_L,
    CPL,
    JR_NC_R8,
    LD_SP_D16,
    LD_MR_R_HLD_A,
    INC_R_SP,
    INC_R_MR_HL,
    DEC_R_MR_HL,
    LD_R_D8_MR_HL,
    SCF,
    JR_C_R8,
    ADD_R_R_HL_SP,
    LD_R_MR_A_HLD,
    DEC_R_SP,
    INC_R_A,
    DEC_R_A,
    LD_R_D8_A,
    CCF,
    LD_B_B,
    LD_B_C,
    LD_B_D,
    LD_B_E,
    LD_B_H,
    LD_B_L,
    LD_B_MR_HL,
    LD_B_A,
    LD_C_B,
    LD_C_C,
    LD_C_D,
    LD_C_E,
    LD_C_H,
    LD_C_L,
    LD_C_MR_HL,
    LD_C_A,
    LD_D_B,
    LD_D_C,
    LD_D_D,
    LD_D_E,
    LD_D_H,
    LD_D_L,
    LD_D_MR_HL,
    LD_D_A,
    LD_E_B,
    LD_E_C,
    LD_E_D,
    LD_E_E,
    LD_E_H,
    LD_E_L,
    LD_E_MR_HL,
    LD_E_A,
    LD_H_B,
    LD_H_C,
    LD_H_D,
    LD_H_E,
    LD_H_H,
    LD_H_L,
    LD_H_MR_HL,
    LD_H_A,
    LD_L_B,
    LD_L_C,
    LD_L_D,
    LD_L_E,
    LD_L_H,
    LD_L_L,
    LD_L_MR_HL,
    LD_L_A,
    LD_MR_HL_B,
    LD_MR_HL_C,
    LD_MR_HL_D,
    LD_MR_HL_E,
    LD_MR_HL_H,
    LD_MR_HL_L,
    HALT,
    LD_MR_HL_A,
    LD_A_B,
    LD_A_C,
    LD_A_D,
    LD_A_E,
    LD_A_H,
    LD_A_L,
    LD_A_MR_HL,
    LD_A_A,
    ADD_A_B,
    ADD_A_C,
    ADD_A_D,
    ADD_A_E,
    ADD_A_H,
    ADD_A_L,
    ADD_A_MR_HL,
    ADD_A_A,
    ADC_A_B,
    ADC_A_C,
    ADC_A_D,
    ADC_A_E,
    ADC_A_H,
    ADC_A_L,
    ADC_A_MR_HL,
    ADC_A_A,
    SUB_A_B,
    SUB_A_C,
    SUB_A_D,
    SUB_A_E,
    SUB_A_H,
    SUB_A_L,
    SUB_A_MR_HL,
    SUB_A_A,
    SBC_A_B,
    SBC_A_C,
    SBC_A_D,
    SBC_A_E,
    SBC_A_H,
    SBC_A_L,
    SBC_A_MR_HL,
    SBC_A_A,
    AND_A_B,
    AND_A_C,
    AND_A_D,
    AND_A_E,
    AND_A_H,
    AND_A_L,
    AND_A_MR_HL,
    AND_A_A,
    XOR_A_B,
    XOR_A_C,
    XOR_A_D,
    XOR_A_E,
    XOR_A_H,
    XOR_A_L,
    XOR_A_MR_HL,
    XOR_A_A,
    OR_A_B,
    OR_A_C,
    OR_A_D,
    OR_A_E,
    OR_A_H,
    OR_A_L,
    OR_A_MR_HL,
    OR_A_A,
    CP_A_B,
    CP_A_C,
    CP_A_D,
    CP_A_E,
    CP_A_H,
    CP_A_L,
    CP_A_MR_HL,
    CP_A_A,
    RET_NZ,
    POP_BC,
    JP_NZ_A16,
    JP_A16,
    CALL_NZ_A16,
    PUSH_BC,
    ADD_A_D8,
    RST_00H,
    RET_Z,
    RET,
    JP_Z_A16,
    PREFIX_CB,
    CALL_Z_A16,
    CALL_A16,
    ADC_A_D8,
    RST_08H,
    RET_NC,
    POP_DE,
    JP_NC_A16,
    CALL_NC_A16,
    PUSH_DE,
    SUB_A_D8,
    RST_10H,
    RET_C,
    RETI,
    JP_C_A16,
    CALL_C_A16,
    SBC_A_D8,
    RST_18H,
    LDH_A8_A,
    POP_HL,
    LD_MC_A,
    LD_C_A8_A,
    LD_A8_A_C,
    PUSH_HL,
    AND_A_D8,
    ADD_SP_R8,
    JP_HL,
    LD_A16_A,
    XOR_A_D8,
    LDH_A8_A,
    LD_A_A8_A,
    PUSH_AF,
    OR_A_D8,
    LD_HL_SP_R8,
    LD_SP_HL,
    LD_A_A16_A,
    CP_A_D8,
    RST_38H
};

std::unordered_map<Opcode, size_t> opcodeMap = {
    {Opcode::NOP, 0x00},
    {Opcode::LD_BC_D16, 0x01},
    {Opcode::LD_MR_R_BC_A, 0x02},
    {Opcode::INC_R_BC, 0x03},
    {Opcode::INC_R_B, 0x04},
    {Opcode::DEC_R_B, 0x05},
    {Opcode::LD_R_D8_B, 0x06},
    {Opcode::RLCA, 0x07},
    {Opcode::LD_A16_R_SP, 0x08},
    {Opcode::ADD_R_R_HL_BC, 0x09},
    {Opcode::LD_R_MR_A_BC, 0x0A},
    {Opcode::DEC_R_BC, 0x0B},
    {Opcode::INC_R_C, 0x0C},
    {Opcode::DEC_R_C, 0x0D},
    {Opcode::LD_R_D8_C, 0x0E},
    {Opcode::RRCA, 0x0F},
    // ... Continue for other opcodes
};